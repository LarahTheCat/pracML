import os
import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
import kagglehub
 
# Download the dataset from Kaggle using kagglehub
dataset_path = kagglehub.dataset_download("saurabh00007/diabetescsv")
 
# Load the dataset
csv_path = os.path.join(dataset_path, "diabetes.csv")
df = pd.read_csv(csv_path)
 
# Select the relevant features for clustering
features = ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness',
            'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age']
X = df[features].copy()
 
# Replace 0 with NaN in columns where 0 is not a valid value
features_with_zeros = ['Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI']
X[features_with_zeros] = X[features_with_zeros].replace(0, np.nan)
 
# Impute missing values with column means
X.fillna(X.mean(), inplace=True)
 
# Standardize the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
 
# Find the optimal number of clusters using silhouette score
best_k = 2
best_score = -1
 
for k in range(2, 11):
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(X_scaled)
    labels = kmeans.labels_
    score = silhouette_score(X_scaled, labels)
 
    if score > best_score:
        best_score = score
        best_k = k


print(f"Optimal number of clusters (k): {best_k}")
# Perform final KMeans clustering
kmeans = KMeans(n_clusters=best_k, random_state=42)
kmeans.fit(X_scaled)
labels = kmeans.labels_
# Add cluster labels to the DataFrame
df['Cluster'] = labels
print(df.head())
