# Using dataset by scikit learn 
import numpy as np 
import pandas as pd 
from sklearn import datasets 
from sklearn.preprocessing import StandardScaler 
from sklearn.cluster import KMeans 
from sklearn.metrics import silhouette_score 
diabetes = datasets.load_diabetes() 
# Extract the feature data into a DataFrame 
X = pd.DataFrame(diabetes.data, columns=diabetes.feature_names) 
# Handle missing values 
X.fillna(0, inplace=True) 
# Standardize the features 
scaler = StandardScaler() 
X_scaled = scaler.fit_transform(X) 
# Find optimal k using silhouette score 
best_k = 2 
best_score = -1 

for k in range(2, 11): 
  kmeans = KMeans(n_clusters=k, random_state=42) 
  kmeans.fit(X_scaled) 
  labels = kmeans.labels_ 
  score = silhouette_score(X_scaled, labels) 
  if score > best_score: 
    best_score = score 
    best_k = k 
print(f"Optimal number of clusters (k):\n {best_k}") 
# Perform K-means clustering with the optimal k 
kmeans = KMeans(n_clusters=best_k, random_state=42) 
kmeans.fit(X_scaled) 
labels = kmeans.labels_ 
# Add the cluster labels to the DataFrame 
X['Cluster'] = labels 
# Print the first few rows 
print(X.head())
